openapi: 3.0.0
info:
  title: Cinema Bookings API
  version: 0.0.1
servers:
  - url: http://localhost:4040
basePath: /
schemes:
  - http
paths:
  /movies:
    get:
      summary: Retrieve a list of movies
      tags:
        - movies
      responses:
        200:
          description: OK
          content: 
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MovieWithScreenings'
    post:
      summary: Create a movie
      tags:
        - movies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                runtimeMins:
                  type: interger
            example:
              title: The Matrix
              runtimeMins: 136
      responses:
        400:
          description: Bad request. One or more of the required fields are missing or invalid.
        200:
          description: OK
          content: 
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: "#/components/schemas/Movie"
              example:
                data:
                  id: 1
                  title: The Matrix
                  runtimeMins: 136
                  createdAt: 2022-06-09T08:49:28.952Z
                  updatedAt: 2022-06-09T08:49:28.952Z
  /movies/{movieId}:
    get:
      summary: Get a movie by ID
      tags:
        - movies
      produces:
        - application/json
      responses:
        404: 
          description: The requested Movie could not be found.
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: "#/components/schemas/MovieWithScreenings"
  /customer/register:
    post:
      summary: Register a new user
      tags:
        - customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                phone:
                  type: string
                email:
                  type: string
            example:
              name: 'John'
              phone: '123456'
              email: john@test.com
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Customer'
        400:
          description: One or more of the required fields are missing or invalid
        409:
          description: The email provided is already in use  
  /customer/{:id}:
    patch:
      summary: Update a Customer by ID
      tags:
        - customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
            example:
              name: Jane
      responses:
        200: 
          description: OK
          content:
            application/json:
              schema: 
                type: object
                properties:
                  data: 
                    type: object
                    $ref: '#/components/schemas/Customer'
        404:
          description: Customer not found
  /screens:
    post:
      summary: Create a screen
      tags:
        - screen
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties:
                number: integer
            example:
              number: 1
      produces:
        - application/json
      responses:
        400:
          description: Number is required
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Screen'



components:
  schemas:
    Contact: 
      type: object
      properties:
        id: 
          type: integer
        phone:
          type: string
        email:
          type: string
        createdAt:
          type: string
        updatedAt: 
          type: string
    Customer:
      type: object
      properties:
        id:
          type: integer
        name: 
          type: string
        contact:
          type: object
          $ref: '#/components/schemas/Contact'
        createdAt:
          type: string
        updatedAt: 
          type: string
    Screening:
      type: object
      properties:
        id:
          type: integer
        movieId: 
          type: integer
        screenId: 
          type: integer
        createdAt:
          type: string
        updatedAt: 
          type: string
    Movie:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        runtimeMins:
          type: integer
        createdAt:
          type: string
        updatedAt:
          type: string
    MovieWithScreenings:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        runtimeMins:
          type: integer
        screenings:
          type: array
          items:
            $ref: '#/components/schemas/Screening'
        createdAt:
          type: string
        updatedAt:
          type: string
    Screen:
      type: object
      properties:
        id:
          type: integer
        number:
          type: integer
        createdAt:
          type: string
        updatedAt:
          type: string